"""
Pytest configuration and fixtures for LightRAG API tests.
"""
import os
import pytest
from unittest.mock import AsyncMock, MagicMock
from fastapi.testclient import TestClient

# Set test environment variables before importing app modules
os.environ["OPENAI_API_KEY"] = "test_key_12345"
os.environ["RAG_API_KEYS"] = "test_api_key_1,test_api_key_2"
os.environ["FAST_FAILLESS_INIT"] = "1"
os.environ["ALLOW_START_WITHOUT_OPENAI_KEY"] = "1"

from app.api.server import app


@pytest.fixture
def test_client():
    """
    Create FastAPI test client.
    
    Returns:
        TestClient: FastAPI test client instance.
    """
    return TestClient(app)


@pytest.fixture
def mock_rag_manager():
    """
    Create mock RAG manager for testing.
    
    Returns:
        AsyncMock: Mocked RAG manager.
    """
    mock_manager = AsyncMock()
    mock_rag = AsyncMock()
    mock_manager.get_rag.return_value = mock_rag
    mock_rag.aquery.return_value = "Test RAG response"
    mock_rag.ainsert.return_value = None
    return mock_manager


@pytest.fixture
def valid_jwt_token():
    """
    Generate valid JWT token for testing.
    
    Returns:
        str: Valid JWT Bearer token.
    """
    # This would be generated by the auth system in real usage
    return "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0X3VzZXIiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NTU4MDAzNTIsImV4cCI6OTk5OTk5OTk5OSwiaXNzIjoibGlnaHRyYWcifQ.test"


@pytest.fixture
def auth_headers(valid_jwt_token):
    """
    Create authentication headers for API requests.
    
    Args:
        valid_jwt_token (str): Valid JWT token.
        
    Returns:
        dict: Headers with Bearer token.
    """
    return {"Authorization": f"Bearer {valid_jwt_token}"}


@pytest.fixture
def api_key_headers():
    """
    Create API key headers for token requests.
    
    Returns:
        dict: Headers with API key.
    """
    return {"X-API-Key": "test_api_key_1"}